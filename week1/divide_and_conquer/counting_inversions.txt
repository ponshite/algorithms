The divide and conquer paradigm.
1. Divide the problem into smaller subproblems.
2. Conquer via recursive calls.
3. Combine solutions of subproblems into one of the original problem.


Counting inversions.
Input: Array A containing the numbers 1,2,3, in some arbitrary order.
Output: Number of inversions = number of pairs (i,j) of array indices with
i<j and A[i] > A[j]

Examples and motivation:
[1,3,5,2,4,6]

Inversions:
 3 -> 2
 5 -> 2
 5 -> 4

What is the largest number of inversions?
[6,5,4,3,2,1]

5 + 4 + 3 + 2 +1 = (n*(n-1)) / 2


High level approach.
Brute force.
Enumerate all the pairs, check for inversions
O(n^2)

Can we do better?
Key idea #1 Use divide and conquer

left inversion if i,j <= n/2
right inversion if i,j > n/2
split if i <= n/2 < j

We can compute all the left and right inversion using recursion.
Need to implement a separate method to count split inversions.
[1,3,5,2,4,6]
All split inversions.
All the work will be done in the countSplitInversions subroutine.

High level algorithm:
count(array A, length n)
if n =1 return 0;
else :
  x = count(1st half of A, n/2)
  y = count(2nd half of A, n/2)
  z = countSplitInversions(A,n)
  return x + y + z

Goal. Implement countSplit inversions in O(n) time.
Therefor we will have O(nlogn) time for the whole algorithm.


Key Idea.
Piggy back in Merge sort.
Demand the recursive calls to sort the array.
Why? The merge step will naturally uncover inversions.

Suppose the input array A has no split inversions.
What is the relationship between the sorted subarrays
B and C?
All the elements of B are less than all elements on C.
(B is copied over and then C is concatenated)


Consider merging:
1,3,5 and 2,4,6
Output
1, 2,3,4

When we copy the 2, we have diverged from the trivial
execution.
2 would expose some inversions.
(3,2)
(5,2)
2 is smaller than the remaining elements in B.

When we copy the 4, we discover another inversion
(5,4)

General Claim
Claim: The split inversions involving an element y
of the 2nd array C are precisely the numbers left
in the 1st array B when y is copied to the output D.

Proof:
Let x be an element of the first element B.
1. If x copied to output D before y, then x< y.
  No split inversions.
2. If y copied to output D before then, y<x
  x y are a split inversion.
QED.


Merge_And_CountSplitInv

While merging two sorted subarrays,
keep running total of
number of split inversions.
Init with 0
Augment when element of 2nd array
C gets copied to output D
by the numbers of elements remaining
in B.

Runtime of subroutine?
O(n)
